tipos de software PARA ENTORNOS DE DESARROLLOS

software  de sistema
	- sistema operativo drivers y controladores
		- programas que permiten interactuar con el sistema operativo

software de aplicacion
	- Suites aof, navegadores, juegos, edcion de imagen
		- programas que permiten hacer trabajos 

 software de desarrollo
  	- editores, compiladores e interpretes
		- programas que permite crear otro software y programas

Firmware: software de bajo nivel que esta cercano y comunica con el hardware


relacion entre hardware software

	- DISCO DURO almacena de forma permanente los archivos ejecutables y archivos de datos

	- memoria RAM almacena de forma temporal el codigo binario de los archivos ejecutables y los archivos de datos necesarios

	- CPU lee y ejecuta instrucciones almacenadas en RAM, asi como los datos necesarios.
			- La CPU tiene cache L1,L2 y L3 

	- E/S recoge nuevos datos desde la entrada, se muestran resultados, se leen/guardan a disco


Codigo fuente, objeto y ejecutable

	- código fuente: archivo de texto legible escrito en un lenguaje de programacion. 
		- Permite modificar el programa de una forma sencilla

	- codigo objeto: archivo binario no ejecutable
		- codgio que se genera a partir del codigo fuente que no se entiende

	- codigo ejecutable: archivo binario ejecutable
		-  solo valido para lenguajes compilados como JAVA C C++
			- En lenguajes interpretados no existe codigo binario, solo codifo fuente como PHP y javascript
			- el codigo objetivo en java se denomina ByteCode


3: ciclo de vida de software
	- 3.1 ingenieria de software
		- Estudio de los principios y metodologias para desarrollo y mantenimiento de software

Fases principales

	- analisis saber que necesitamos 

	- diseño como implementar lo que sabemos para solucionar y crear el software

	- codificacion escribir el codigo

	- pruebas testear y probar el codigo para saber si funciona bien el codigo

	- mantenimiento y documentacion


ANALISIS
	- definir los requisitos del cliente para cumplir el software a desarrollar
			- ser completo y sin omisiones
			- ser conciso y sin trivialidades
			- evitar ambiguedades y utilizar lenguaje formal
			- evitar detalles de diseño
			- sea entendible por el cliente
			- separar requisitos funcionales y no funcionales
			- dividir y ordenar por jerarquia el modelo
			- fijar criterios de validacion

