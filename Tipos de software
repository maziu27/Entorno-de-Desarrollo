tipos de software PARA ENTORNOS DE DESARROLLOS

software  de sistema
	- sistema operativo drivers y controladores
		- programas que permiten interactuar con el sistema operativo

software de aplicacion
	- Suites aof, navegadores, juegos, edcion de imagen
		- programas que permiten hacer trabajos 

 software de desarrollo
  	- editores, compiladores e interpretes
		- programas que permite crear otro software y programas

Firmware: software de bajo nivel que esta cercano y comunica con el hardware


relacion entre hardware software

	- DISCO DURO almacena de forma permanente los archivos ejecutables y archivos de datos

	- memoria RAM almacena de forma temporal el codigo binario de los archivos ejecutables y los archivos de datos necesarios

	- CPU lee y ejecuta instrucciones almacenadas en RAM, asi como los datos necesarios.
			- La CPU tiene cache L1,L2 y L3 

	- E/S recoge nuevos datos desde la entrada, se muestran resultados, se leen/guardan a disco


Codigo fuente, objeto y ejecutable

	- código fuente: archivo de texto legible escrito en un lenguaje de programacion. 
		- Permite modificar el programa de una forma sencilla

	- codigo objeto: archivo binario no ejecutable
		- codgio que se genera a partir del codigo fuente que no se entiende

	- codigo ejecutable: archivo binario ejecutable
		-  solo valido para lenguajes compilados como JAVA C C++
			- En lenguajes interpretados no existe codigo binario, solo codifo fuente como PHP y javascript
			- el codigo objetivo en java se denomina ByteCode


3: ciclo de vida de software
	- 3.1 ingenieria de software
		- Estudio de los principios y metodologias para desarrollo y mantenimiento de software

Fases principales

	- analisis saber que necesitamos 

	- diseño como implementar lo que sabemos para solucionar y crear el software

	- codificacion escribir el codigo

	- pruebas testear y probar el codigo para saber si funciona bien el codigo

	- mantenimiento y documentacion


ANALISIS
	- definir los requisitos del cliente para cumplir el software a desarrollar
			- ser completo y sin omisiones
			- ser conciso y sin trivialidades
			- evitar ambiguedades y utilizar lenguaje formal
			- evitar detalles de diseño
			- sea entendible por el cliente
			- separar requisitos funcionales y no funcionales
			- dividir y ordenar por jerarquia el modelo
			- fijar criterios de validacion
DISEÑO
	- se descompone y organiza el sistema en elementos que se pueden ser desarrollados por separado
	- se especifica la interrelacion y funcionalidad de los elementos componentes
	- Las actividades habituales son las siguientes:
 		- diseño arquitectonico,
		- diseño detallado
		- diseño de datos
		- diseño de interfaz de usuario
CODIFICACION

	- se escribe el codigo fuente
	- se utilizan lenguajes 
		- de programacion como C, C++, Java, Javascript
		- Otro tipo como HTML, XML, JSON
PRUEBAS

	- conseguir y chequear que el programa funciona correctamente sin fallos
		- someter el programa al maximo numero de situaciones diferentes

MANTENIMIENTO

	- en la vida del producto hay que realizar cambios ocasionales y revisiones
	- hay que rehacer parte del trabajo realizado en las fases previas
		- correctivo: se corrigen defectos

		- Perfectivo: se mejora la funcionalidad

		- evolutivo: se añade funcionalidades nuevas

		- adaptativo: se adapta a nuevos entornos


3.2.6 resultados de cada fase

	- analisis: especificacion de requisitosde l software
	- DISEÑO aequitectonico: documento de arquitetura del softwre
	- DISEÑO detallado: especificacion de modulos y funciones
	- CODIFICACION: codigo fuente
	- PRUEBAS de unidades
	- pruebas de integracion: sistema utilizable
	- Pruebas del sistema: sistema aceptado
	- Documentacion: Documentacion tecnica y usuario
-	mantenimiento informes de errores y control de cambios


4.2 Modelo en cascada:
	modelo tiene problemas, las fases van por orden y el  resultado de una fase es el empiezo de otra, si una fase va mal la otra fase puede tener problemas al empezar

Modelo en V:
	Vision jerarquizada con distintos nibeles


4.6: Prototipos
	A menudo los requisitos no estan especificados claramente

		- por no existir experiencia previa	
		- 

4.7 Prototipos 2

4.8 Prototipos 3


4.11 Metodologias agiles 1
	- Son metodos de ingenieria  del software basaados en el desarrollo iterativoe incremental
	- Los requisitos y soluciones evolucionan con el tiempo segun la necesidad del proyecto
	- El trabajo es realizado mediante la colaboracion de equipos auto-organizafos y multidisciplinarios, inmersos en un proceso compartido de toma de decisiones a corto plazo
	- Las metodologias mas conocidas son
		-KanBan
		-Scrum
		-XP extreme programming

4.13 Metodologias agiles 2
	- Individuos e interacciones sobre procesos y herramientas
	- Software funcionande sobre documentacion extensiva
	- Colaboracion con el cliente sobre negociacion contractual
	- respuesta ante al cambio sobre seguir un plan

	4.12.1 Kanban 1
		- Sistema de tarjetas
		- Controla por demanada la fabricacion de los productos necesarios en la cantidad y tiempos necesarios
		- Enfocado a entregar el máximo valor para los clientes utilizando los recursos justos

4.12.3 SCRUM conceptos
	- Modelo de desarrollo incremental
	- Iteraciones (sprint) cada 2 a 4 semanas
	- Al principio de cada iteracion se establecen sus objetivos priorizados (sprint backlog)
	- Al finalizar cada iteracion se obtiene una entrega parcial utilizable por el cliente
	- Existen reuniones diarias para tratar la marcha del sprint
	
